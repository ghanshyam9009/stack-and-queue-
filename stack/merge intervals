class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {

        int n= intervals.size()-1;

        sort(intervals.begin(),intervals.end());
        stack<vector<int>>s;

        s.push(intervals[0]);

        for(int i=1;i<=n;i++){
            vector<int>top= s.top();

            if(intervals[i][0]>top[1]){
                s.push(intervals[i]);
            }

            else if(intervals[i][1]>top[1]){
                top[1]=intervals[i][1];
                s.pop();
                s.push(top);
            }
        }

        vector<vector<int>> ans;
        while(!s.empty()){
            ans.push_back(s.top());
            s.pop();
        }
        return ans;
        
    }
};


// another approach

vector<vector<int>> mergeOverlappingIntervals(vector<vector<int>> &arr) {
    int n = arr.size(); // size of the array

    //sort the given intervals:
    sort(arr.begin(), arr.end());

    vector<vector<int>> ans;

    for (int i = 0; i < n; i++) {
        // if the current interval does not
        // lie in the last interval:
        if (ans.empty() || arr[i][0] > ans.back()[1]) {
            ans.push_back(arr[i]);
        }
        // if the current interval
        // lies in the last interval:
        else {
            ans.back()[1] = max(ans.back()[1], arr[i][1]);
        }
    }
    return ans;
}
