Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
Output: true
Explanation: We might do the following sequence:
push(1), push(2), push(3), push(4),
pop() -> 4,
push(5),
pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1


class Solution {
public:
    bool validateStackSequences(vector<int>& pushed, vector<int>& popped) {
        stack<int> s;
        // Intialise one pointer pointing on popped array
        int j = 0;
        for(int i = 0;i < pushed.size() ;i++){
            s.push(pushed[i]);
            // if st.peek() values equal to popped[j] then pop
            // and increment the pointer
            while(s.size() > 0 && s.top() == popped[j]){
                s.pop();
                j++;
            }
        }
        //if stack is empty return true else false
        return s.empty();
    }
};

// class Solution {
// public:
//     bool validateStackSequences(vector<int>& pushed, vector<int>& popped) {
//         stack<int> st;
//         int j = 0;
//         for(auto x: pushed) {
//             st.push(x);
//             while(!st.empty() and st.top() == popped[j]) {
//                 st.pop();
//                 j++;
//             }
//         }
//         return st.empty();
//     }
// };
